// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package config

import (
	"awesomeProject/internal/app/controller"
	"awesomeProject/internal/app/repository"
	"awesomeProject/internal/app/service"
	"github.com/google/wire"
)

// Injectors from injector.go:

func Init() *Initialize {
	gormDB := ConnectDB()
	userRepositoryImpl := repository.UserRepositoryInit(gormDB)
	authServiceImpl := service.AuthServiceInit(userRepositoryImpl)
	authControllerImpl := controller.AuthControllerInit(authServiceImpl)
	addressRepositoryImpl := repository.AddressRepositoryInit(gormDB)
	userServiceImpl := service.UserServiceInit(userRepositoryImpl, addressRepositoryImpl)
	userControllerImpl := controller.UserControllerInit(userServiceImpl)
	roomRepositoryImpl := repository.RoomRepositoryInit(gormDB)
	borrowedItemRepositoryImpl := repository.BorrowedItemRepositoryInit(gormDB)
	serviceRepositoryImpl := repository.ServiceRepositoryInit(gormDB)
	roomServiceImpl := service.RoomServiceInit(roomRepositoryImpl, addressRepositoryImpl, borrowedItemRepositoryImpl, serviceRepositoryImpl)
	roomControllerImpl := controller.RoomControllerInit(roomServiceImpl)
	geographyRepositoryImpl := repository.GeographyRepositoryInit(gormDB)
	geographyServiceImpl := service.GeographyServiceInit(geographyRepositoryImpl)
	geographyControllerImpl := controller.GeographyControllerInit(geographyServiceImpl)
	addressServiceImpl := service.AddressServiceInit(addressRepositoryImpl)
	addressControllerImpl := controller.AddressControllerInit(addressServiceImpl)
	servicesServiceImpl := service.ServicesServiceInit(serviceRepositoryImpl)
	servicesControllerImpl := controller.ServicesControllerInit(servicesServiceImpl)
	hashContractRepositoryImpl := repository.HashContractRepositoryInit(gormDB)
	hashContractServiceImpl := service.HashContractServiceInit(hashContractRepositoryImpl)
	contractRepositoryImpl := repository.ContractRepositoryInit(gormDB)
	servicesDemandRepositoryImpl := repository.ServicesDemandRepositoryInit(gormDB)
	invoiceRepositoryImpl := repository.InvoiceRepositoryInit(gormDB)
	servicesHistoryRepositoryImpl := repository.ServicesHistoryRepositoryInit(gormDB)
	transactionRepositoryImpl := repository.TransactionRepositoryInit(gormDB)
	bookingRequestRepositoryImpl := repository.BookingRequestRepositoryInit(gormDB)
	contractServiceImpl := service.ContractServiceInit(contractRepositoryImpl, hashContractRepositoryImpl, servicesDemandRepositoryImpl, invoiceRepositoryImpl, roomRepositoryImpl, userRepositoryImpl, servicesHistoryRepositoryImpl, borrowedItemRepositoryImpl, transactionRepositoryImpl, bookingRequestRepositoryImpl)
	contractControllerImpl := controller.ContractControllerInit(contractServiceImpl)
	invoiceServiceImpl := service.InvoiceServiceInit(invoiceRepositoryImpl, servicesDemandRepositoryImpl, transactionRepositoryImpl)
	invoiceControllerImpl := controller.InvoiceControllerInit(invoiceServiceImpl)
	servicesDemandServiceImpl := service.ServicesDemandServiceInit(servicesDemandRepositoryImpl)
	servicesDemandControllerImpl := controller.ServicesDemandControllerInit(servicesDemandServiceImpl)
	bookingRequestServiceImpl := service.BookingRequestServiceInit(bookingRequestRepositoryImpl, borrowedItemRepositoryImpl)
	bookingRequestControllerImpl := controller.BookingRequestControllerInit(bookingRequestServiceImpl)
	transactionServiceImpl := service.TransactionServiceInit(transactionRepositoryImpl)
	transactionControllerImpl := controller.TransactionControllerInit(transactionServiceImpl)
	signatureRepositoryImpl := repository.SignatureRepositoryInit(gormDB)
	signatureServiceImpl := service.SignatureServiceInit(signatureRepositoryImpl)
	signatureControllerImpl := controller.SignatureControllerInit(signatureServiceImpl)
	statisticRepositoryImpl := repository.StatisticRepositoryInit(gormDB)
	statisticServiceImpl := service.StatisticServiceInit(statisticRepositoryImpl)
	statisticControllerImpl := controller.StatisticControllerInit(statisticServiceImpl)
	initialize := NewInitialize(authControllerImpl, authServiceImpl, userControllerImpl, userServiceImpl, userRepositoryImpl, roomControllerImpl, roomServiceImpl, roomRepositoryImpl, geographyRepositoryImpl, geographyControllerImpl, geographyServiceImpl, addressControllerImpl, addressServiceImpl, addressRepositoryImpl, serviceRepositoryImpl, servicesControllerImpl, servicesServiceImpl, hashContractServiceImpl, hashContractRepositoryImpl, contractControllerImpl, contractServiceImpl, contractRepositoryImpl, invoiceControllerImpl, invoiceServiceImpl, invoiceRepositoryImpl, servicesDemandControllerImpl, servicesDemandServiceImpl, servicesDemandRepositoryImpl, bookingRequestControllerImpl, bookingRequestServiceImpl, bookingRequestRepositoryImpl, servicesHistoryRepositoryImpl, transactionControllerImpl, transactionServiceImpl, transactionRepositoryImpl, signatureControllerImpl, signatureServiceImpl, signatureRepositoryImpl, borrowedItemRepositoryImpl, statisticControllerImpl, statisticServiceImpl, statisticRepositoryImpl)
	return initialize
}

// injector.go:

var db = wire.NewSet(ConnectDB)

var authSvcSet = wire.NewSet(service.AuthServiceInit, wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)))

var authCtrlSet = wire.NewSet(controller.AuthControllerInit, wire.Bind(new(controller.AuthController), new(*controller.AuthControllerImpl)))

var addressSvcSet = wire.NewSet(service.AddressServiceInit, wire.Bind(new(service.AddressService), new(*service.AddressServiceImpl)))

var addressCtrlSet = wire.NewSet(controller.AddressControllerInit, wire.Bind(new(controller.AddressController), new(*controller.AddressControllerImpl)))

var addressRepoSet = wire.NewSet(repository.AddressRepositoryInit, wire.Bind(new(repository.AddressRepository), new(*repository.AddressRepositoryImpl)))

var userSvcSet = wire.NewSet(service.UserServiceInit, wire.Bind(new(service.UserService), new(*service.UserServiceImpl)))

var userCtrlSet = wire.NewSet(controller.UserControllerInit, wire.Bind(new(controller.UserController), new(*controller.UserControllerImpl)))

var userRepoSet = wire.NewSet(repository.UserRepositoryInit, wire.Bind(new(repository.UserRepository), new(*repository.UserRepositoryImpl)))

var roomSvcSet = wire.NewSet(service.RoomServiceInit, wire.Bind(new(service.RoomService), new(*service.RoomServiceImpl)))

var roomCtrlSet = wire.NewSet(controller.RoomControllerInit, wire.Bind(new(controller.RoomController), new(*controller.RoomControllerImpl)))

var roomRepoSet = wire.NewSet(repository.RoomRepositoryInit, wire.Bind(new(repository.RoomRepository), new(*repository.RoomRepositoryImpl)))

var geographySvcSet = wire.NewSet(service.GeographyServiceInit, wire.Bind(new(service.GeographyService), new(*service.GeographyServiceImpl)))

var geographyCtrlSet = wire.NewSet(controller.GeographyControllerInit, wire.Bind(new(controller.GeographyController), new(*controller.GeographyControllerImpl)))

var geographyRepoSet = wire.NewSet(repository.GeographyRepositoryInit, wire.Bind(new(repository.GeographyRepository), new(*repository.GeographyRepositoryImpl)))

var serviceSvcSet = wire.NewSet(service.ServicesServiceInit, wire.Bind(new(service.ServicesService), new(*service.ServicesServiceImpl)))

var serviceCtrlSet = wire.NewSet(controller.ServicesControllerInit, wire.Bind(new(controller.ServicesController), new(*controller.ServicesControllerImpl)))

var serviceRepoSet = wire.NewSet(repository.ServiceRepositoryInit, wire.Bind(new(repository.ServiceRepository), new(*repository.ServiceRepositoryImpl)))

var contractSvcSet = wire.NewSet(service.ContractServiceInit, wire.Bind(new(service.ContractService), new(*service.ContractServiceImpl)))

var contractCtrlSet = wire.NewSet(controller.ContractControllerInit, wire.Bind(new(controller.ContractController), new(*controller.ContractControllerImpl)))

var contractRepoSet = wire.NewSet(repository.ContractRepositoryInit, wire.Bind(new(repository.ContractRepository), new(*repository.ContractRepositoryImpl)))

var invoiceSvcSet = wire.NewSet(service.InvoiceServiceInit, wire.Bind(new(service.InvoiceService), new(*service.InvoiceServiceImpl)))

var invoiceCtrlSet = wire.NewSet(controller.InvoiceControllerInit, wire.Bind(new(controller.InvoiceController), new(*controller.InvoiceControllerImpl)))

var invoiceRepoSet = wire.NewSet(repository.InvoiceRepositoryInit, wire.Bind(new(repository.InvoiceRepository), new(*repository.InvoiceRepositoryImpl)))

var hashContractRepoSet = wire.NewSet(repository.HashContractRepositoryInit, wire.Bind(new(repository.HashContractRepository), new(*repository.HashContractRepositoryImpl)))

var hashContractSvcSet = wire.NewSet(service.HashContractServiceInit, wire.Bind(new(service.HashContractService), new(*service.HashContractServiceImpl)))

var servicesDemandSvcSet = wire.NewSet(service.ServicesDemandServiceInit, wire.Bind(new(service.ServicesDemandService), new(*service.ServicesDemandServiceImpl)))

var servicesDemandCtrlSet = wire.NewSet(controller.ServicesDemandControllerInit, wire.Bind(new(controller.ServicesDemandController), new(*controller.ServicesDemandControllerImpl)))

var servicesDemandRepoSet = wire.NewSet(repository.ServicesDemandRepositoryInit, wire.Bind(new(repository.ServicesDemandRepository), new(*repository.ServicesDemandRepositoryImpl)))

var bookingRequestSvcSet = wire.NewSet(service.BookingRequestServiceInit, wire.Bind(new(service.BookingRequestService), new(*service.BookingRequestServiceImpl)))

var bookingRequestCtrlSet = wire.NewSet(controller.BookingRequestControllerInit, wire.Bind(new(controller.BookingRequestController), new(*controller.BookingRequestControllerImpl)))

var bookingRequestRepoSet = wire.NewSet(repository.BookingRequestRepositoryInit, wire.Bind(new(repository.BookingRequestRepository), new(*repository.BookingRequestRepositoryImpl)))

var servicesHistoryRepoSet = wire.NewSet(repository.ServicesHistoryRepositoryInit, wire.Bind(new(repository.ServicesHistoryRepository), new(*repository.ServicesHistoryRepositoryImpl)))

var transactionRepoSet = wire.NewSet(repository.TransactionRepositoryInit, wire.Bind(new(repository.TransactionRepository), new(*repository.TransactionRepositoryImpl)))

var transactionSvcSet = wire.NewSet(service.TransactionServiceInit, wire.Bind(new(service.TransactionService), new(*service.TransactionServiceImpl)))

var transactionCtrlSet = wire.NewSet(controller.TransactionControllerInit, wire.Bind(new(controller.TransactionController), new(*controller.TransactionControllerImpl)))

var signatureRepoSet = wire.NewSet(repository.SignatureRepositoryInit, wire.Bind(new(repository.SignatureRepository), new(*repository.SignatureRepositoryImpl)))

var signatureSvcSet = wire.NewSet(service.SignatureServiceInit, wire.Bind(new(service.SignatureService), new(*service.SignatureServiceImpl)))

var signatureCtrlSet = wire.NewSet(controller.SignatureControllerInit, wire.Bind(new(controller.SignatureController), new(*controller.SignatureControllerImpl)))

var borrowedItemRepoSet = wire.NewSet(repository.BorrowedItemRepositoryInit, wire.Bind(new(repository.BorrowedItemRepository), new(*repository.BorrowedItemRepositoryImpl)))

var statisticRepoSet = wire.NewSet(repository.StatisticRepositoryInit, wire.Bind(new(repository.StatisticRepository), new(*repository.StatisticRepositoryImpl)))

var statisticSvcSet = wire.NewSet(service.StatisticServiceInit, wire.Bind(new(service.StatisticService), new(*service.StatisticServiceImpl)))

var statisticCtrlSet = wire.NewSet(controller.StatisticControllerInit, wire.Bind(new(controller.StatisticController), new(*controller.StatisticControllerImpl)))
